generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:arian@localhost:5432/salud-en-movimiento?schema=public"
}

// Model for User
model User {
  idUser       Int       @id @default(autoincrement())
  name         String?
  lastname     String?
  birthday     DateTime?
  weight       Decimal?
  rol          String?
  created_date DateTime?
  updated_date DateTime?

  // Define the relation with Routine_has_User
  //routines      Routine_has_User[]
  credentials       Credential[]
  routines_has_user User_has_Routine[]
}

model Credential {
  idCredential Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  created_date DateTime?
  updated_date DateTime?

  // Define the relation with User
  user   User? @relation(fields: [idUser], references: [idUser])
  idUser Int?

  sessions Session[]
}

model Session {
  idSession    Int       @id @default(autoincrement())
  token        String    @unique
  created_date DateTime?
  updated_date DateTime?

  // Define the relation with User
  credential   Credential @relation(fields: [idCredential], references: [idCredential])
  idCredential Int
}

model Routine {
  idRoutine       Int       @id @default(autoincrement())
  name            String?
  created_date    DateTime?
  updated_date    DateTime?
  expiration_date DateTime?
  objective       String?
  observation     String?

  user_has_routines User_has_Routine[]
  exerciseGroups    Routine_has_ExerciseGroup[]
}

model User_has_Routine {
  idUser_has_Routine Int       @id @default(autoincrement())
  created_date       DateTime?
  updated_date       DateTime?

  // Define the relation with User
  user   User @relation(fields: [idUser], references: [idUser])
  idUser Int

  // Define the relation with Routine
  routine   Routine @relation(fields: [idRoutine], references: [idRoutine])
  idRoutine Int
}

model Routine_has_ExerciseGroup {
  idRoutine_has_ExerciseGroup Int       @id @default(autoincrement())
  created_date                DateTime?
  updated_date                DateTime?

  // Define the relation with Routine
  routine   Routine @relation(fields: [idRoutine], references: [idRoutine])
  idRoutine Int

  // Define the relation with ExerciseGroup
  exerciseGroup   ExerciseGroup @relation(fields: [idExerciseGroup], references: [idExerciseGroup])
  idExerciseGroup Int
}

model ExerciseGroup {
  idExerciseGroup Int       @id @default(autoincrement())
  name            String?
  created_date    DateTime?
  updated_date    DateTime?

  routine_has_exerciseGroups  Routine_has_ExerciseGroup[]
  exerciseGroup_has_exercises ExerciseGroup_has_Exercise[]
}

model Exercise {
  idExercise  Int     @id @default(autoincrement())
  name        String?
  description String?
  image       String?
  video       String?
  type        String?

  exerciseGroup_has_exercises ExerciseGroup_has_Exercise[]
}

model ExerciseGroup_has_Exercise {
  idExerciseGroup_has_Exercise Int           @id @default(autoincrement())
  created_date                 DateTime?
  updated_date                 DateTime?
  series                       Int?
  repetitions                  Int?
  weight                       Decimal?
  time                         Int?
  // Define the relation with ExerciseGroup
  exerciseGroup                ExerciseGroup @relation(fields: [idExerciseGroup], references: [idExerciseGroup])
  idExerciseGroup              Int

  // Define the relation with Exercise
  exercise   Exercise @relation(fields: [idExercise], references: [idExercise])
  idExercise Int
}
